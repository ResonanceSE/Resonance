services:
  # Database
  db:
    image: postgres:17-alpine
    container_name: resonance-db-1
    volumes:
      - postgres_data:/var/lib/postgresql@17/data/
    env_file:
      - .env
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_DB=${DB_NAME}
    expose:
      - "5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $DB_USER"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_network
    restart: always

  # Backend Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn server.wsgi:application --bind 0.0.0.0:8000"
    volumes:
      - static_volume:/app/static
    ports:
      - "8000:8000"
    env_file:
      - .env 
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app_network
    restart: always

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    env_file:
      - .env
    depends_on:
      - backend
    networks:
      - app_network
    restart: always

  # Nginx Service
  nginx:
    image: nginx:alpine
    container_name: resonance-nginx-1
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/static
    ports:
      - "80:80"
    depends_on:
      - backend
      - frontend
    networks:
      - app_network
    restart: always

volumes:
  postgres_data:
  static_volume:

networks:
  app_network:
    driver: bridge
